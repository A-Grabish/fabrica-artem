[1;36mNeural Doodle for semantic style transfer.[0m
[0;36m  - Using device `cpu` for processing the images.[0m
[0;36m  - Loading `content-freddie.png` for content data.
  - Adding `content-freddie_sem.png` as semantic map.
  - Loading `style-nagel.jpg` for style data.
  - Adding `style-nagel_sem.png` as semantic map.
[0m
[1;94mPhase #0: resolution 16x16  scale 0.03125[0;94m
Traceback (most recent call last):
  File "/usr/lib/python3.4/site-packages/theano/compile/function_module.py", line 859, in __call__
    outputs = self.fn()
TypeError: neib_shape[0]=3, neib_step[0]=1 and ten4.shape[2]=2 not consistent

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/doodle/doodle", line 658, in <module>
    generator.run()
  File "/opt/doodle/doodle", line 596, in run
    self.prepare_style(scale)
  File "/opt/doodle/doodle", line 352, in prepare_style
    result = extractor(self.style_img, self.style_map)
  File "/usr/lib/python3.4/site-packages/theano/compile/function_module.py", line 871, in __call__
    storage_map=getattr(self.fn, 'storage_map', None))
  File "/usr/lib/python3.4/site-packages/theano/gof/link.py", line 314, in raise_with_op
    reraise(exc_type, exc_value, exc_trace)
  File "/usr/lib/python3.4/site-packages/six.py", line 692, in reraise
    raise value.with_traceback(tb)
  File "/usr/lib/python3.4/site-packages/theano/compile/function_module.py", line 859, in __call__
    outputs = self.fn()
TypeError: neib_shape[0]=3, neib_step[0]=1 and ten4.shape[2]=2 not consistent
Apply node that caused the error: Images2Neibs{valid}(Join.0, TensorConstant{(2,) of 3}, TensorConstant{(2,) of 1})
Toposort index: 66
Inputs types: [TensorType(float64, 4D), TensorType(int64, vector), TensorType(int64, vector)]
Inputs shapes: [(1, 516, 2, 1), (2,), (2,)]
Inputs strides: [(8256, 16, 8, 8), (8,), (8,)]
Inputs values: ['not shown', array([3, 3]), array([1, 1])]
Outputs clients: [[Reshape{4}(Images2Neibs{valid}.0, MakeVector{dtype='int64'}.0)]]

Backtrace when the node is created(use Theano flag traceback.limit=N to make it longer):
  File "/opt/doodle/doodle", line 658, in <module>
    generator.run()
  File "/opt/doodle/doodle", line 596, in run
    self.prepare_style(scale)
  File "/opt/doodle/doodle", line 351, in prepare_style
    extractor = self.compile([self.model.tensor_img, self.model.tensor_map], self.do_extract_patches(layer_outputs))
  File "/opt/doodle/doodle", line 407, in do_extract_patches
    patches = theano.tensor.nnet.neighbours.images2neibs(f, (size, size), (stride, stride), mode='valid')

HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
[1;36mNeural Doodle for semantic style transfer.[0m
[0;36m  - Using device `cpu` for processing the images.[0m
[0;36m  - Loading `content-freddie.png` for content data.
  - Adding `content-freddie_sem.png` as semantic map.
  - Loading `style-nagel.jpg` for style data.
  - Adding `style-nagel_sem.png` as semantic map.
[0m
[1;94mPhase #0: resolution 64x64  scale 0.125[0;94m
  - Style layer 3_1: (154, 260, 3, 3) patches in 360kb.
  - Style layer 4_1: (24, 516, 3, 3) patches in 111kb.
  - Content layer conv4_2: 512 features in 32kb.
[0m
  0   [1;97mloss[0m 1.96e+04   [1;97mcontent[0m [1;97m4_2[0m 2.12e+03   [1;97mstyle[0m [1;97m3_1[0m 3.31e+03  [1;97m4_1[0m 1.39e+04   [1;97mquality[0m  0.0%   [1;97mtime[0m 2.8s 
 10   [1;97mloss[0m 1.10e+04   [1;97mcontent[0m [1;97m4_2[0m 1.27e+03   [1;97mstyle[0m [1;97m3_1[0m 2.45e+03  [1;97m4_1[0m 7.17e+03   [1;97mquality[0m 13.2%   [1;97mtime[0m 32.9s 
 20   [1;97mloss[0m 9.46e+03   [1;97mcontent[0m [1;97m4_2[0m 1.17e+03   [1;97mstyle[0m [1;97m3_1[0m 2.19e+03  [1;97m4_1[0m 5.97e+03   [1;97mquality[0m 25.4%   [1;97mtime[0m 28.8s 
 30   [1;97mloss[0m 8.87e+03   [1;97mcontent[0m [1;97m4_2[0m 1.14e+03   [1;97mstyle[0m [1;97m3_1[0m 2.05e+03  [1;97m4_1[0m 5.57e+03   [1;97mquality[0m 35.7%   [1;97mtime[0m 24.2s 
 40   [1;97mloss[0m 8.37e+03   [1;97mcontent[0m [1;97m4_2[0m 1.12e+03   [1;97mstyle[0m [1;97m3_1[0m 1.91e+03  [1;97m4_1[0m 5.26e+03   [1;97mquality[0m 37.4%   [1;97mtime[0m 22.8s 
 50   [1;97mloss[0m 8.07e+03   [1;97mcontent[0m [1;97m4_2[0m 1.12e+03   [1;97mstyle[0m [1;97m3_1[0m 1.79e+03  [1;97m4_1[0m 5.09e+03   [1;97mquality[0m 42.5%   [1;97mtime[0m 27.8s 
 60   [1;97mloss[0m 7.86e+03   [1;97mcontent[0m [1;97m4_2[0m 1.12e+03   [1;97mstyle[0m [1;97m3_1[0m 1.71e+03  [1;97m4_1[0m 4.98e+03   [1;97mquality[0m 48.8%   [1;97mtime[0m 34.7s 
 70   [1;97mloss[0m 7.71e+03   [1;97mcontent[0m [1;97m4_2[0m 1.11e+03   [1;97mstyle[0m [1;97m3_1[0m 1.64e+03  [1;97m4_1[0m 4.91e+03   [1;97mquality[0m 54.4%   [1;97mtime[0m 30.9s 

[1;94mPhase #1: resolution 128x128  scale 0.25[0;94m
  - Style layer 3_1: (744, 260, 3, 3) patches in 1,740kb.
  - Style layer 4_1: (154, 516, 3, 3) patches in 715kb.
  - Content layer conv4_2: 512 features in 131kb.
[0m
 80   [1;97mloss[0m 1.14e+04   [1;97mcontent[0m [1;97m4_2[0m 1.30e+03   [1;97mstyle[0m [1;97m3_1[0m 2.33e+03  [1;97m4_1[0m 7.72e+03   [1;97mquality[0m  2.7%   [1;97mtime[0m 11.0s 
 90   [1;97mloss[0m 6.70e+03   [1;97mcontent[0m [1;97m4_2[0m 1.01e+03   [1;97mstyle[0m [1;97m3_1[0m 1.46e+03  [1;97m4_1[0m 4.23e+03   [1;97mquality[0m 30.4%   [1;97mtime[0m 102.3s 
100   [1;97mloss[0m 5.89e+03   [1;97mcontent[0m [1;97m4_2[0m 9.70e+02   [1;97mstyle[0m [1;97m3_1[0m 1.28e+03  [1;97m4_1[0m 3.63e+03   [1;97mquality[0m 46.0%   [1;97mtime[0m 104.1s 
110   [1;97mloss[0m 5.59e+03   [1;97mcontent[0m [1;97m4_2[0m 9.59e+02   [1;97mstyle[0m [1;97m3_1[0m 1.20e+03  [1;97m4_1[0m 3.42e+03   [1;97mquality[0m 55.5%   [1;97mtime[0m 109.8s 
120   [1;97mloss[0m 5.43e+03   [1;97mcontent[0m [1;97m4_2[0m 9.53e+02   [1;97mstyle[0m [1;97m3_1[0m 1.15e+03  [1;97m4_1[0m 3.32e+03   [1;97mquality[0m 59.3%   [1;97mtime[0m 105.9s 
130   [1;97mloss[0m 5.30e+03   [1;97mcontent[0m [1;97m4_2[0m 9.48e+02   [1;97mstyle[0m [1;97m3_1[0m 1.10e+03  [1;97m4_1[0m 3.25e+03   [1;97mquality[0m 63.6%   [1;97mtime[0m 107.2s 
140   [1;97mloss[0m 5.21e+03   [1;97mcontent[0m [1;97m4_2[0m 9.42e+02   [1;97mstyle[0m [1;97m3_1[0m 1.06e+03  [1;97m4_1[0m 3.20e+03   [1;97mquality[0m 65.6%   [1;97mtime[0m 106.0s 
150   [1;97mloss[0m 5.15e+03   [1;97mcontent[0m [1;97m4_2[0m 9.39e+02   [1;97mstyle[0m [1;97m3_1[0m 1.04e+03  [1;97m4_1[0m 3.17e+03   [1;97mquality[0m 67.7%   [1;97mtime[0m 100.1s 
160   [1;97mloss[0m 5.15e+03   [1;97mcontent[0m [1;97m4_2[0m 9.39e+02   [1;97mstyle[0m [1;97m3_1[0m 1.03e+03  [1;97m4_1[0m 3.17e+03   [1;97mquality[0m 72.0%   [1;97mtime[0m 104.2s 

[1;94mPhase #2: resolution 256x256  scale 0.5[0;94m
  - Style layer 3_1: (3264, 260, 3, 3) patches in 7,637kb.
  - Style layer 4_1: (744, 516, 3, 3) patches in 3,455kb.
  - Content layer conv4_2: 512 features in 524kb.
[0m
170   [1;97mloss[0m 5.68e+03   [1;97mcontent[0m [1;97m4_2[0m 8.36e+02   [1;97mstyle[0m [1;97m3_1[0m 1.12e+03  [1;97m4_1[0m 3.72e+03   [1;97mquality[0m 23.6%   [1;97mtime[0m 240.6s 
180   [1;97mloss[0m 4.59e+03   [1;97mcontent[0m [1;97m4_2[0m 7.87e+02   [1;97mstyle[0m [1;97m3_1[0m 9.29e+02  [1;97m4_1[0m 2.88e+03   [1;97mquality[0m 48.0%   [1;97mtime[0m 413.6s 
190   [1;97mloss[0m 4.27e+03   [1;97mcontent[0m [1;97m4_2[0m 7.72e+02   [1;97mstyle[0m [1;97m3_1[0m 8.62e+02  [1;97m4_1[0m 2.63e+03   [1;97mquality[0m 62.1%   [1;97mtime[0m 409.9s 
200   [1;97mloss[0m 4.08e+03   [1;97mcontent[0m [1;97m4_2[0m 7.67e+02   [1;97mstyle[0m [1;97m3_1[0m 8.14e+02  [1;97m4_1[0m 2.50e+03   [1;97mquality[0m 68.2%   [1;97mtime[0m 418.5s 
210   [1;97mloss[0m 3.98e+03   [1;97mcontent[0m [1;97m4_2[0m 7.58e+02   [1;97mstyle[0m [1;97m3_1[0m 7.87e+02  [1;97m4_1[0m 2.44e+03   [1;97mquality[0m 73.0%   [1;97mtime[0m 414.1s 
220   [1;97mloss[0m 3.89e+03   [1;97mcontent[0m [1;97m4_2[0m 7.50e+02   [1;97mstyle[0m [1;97m3_1[0m 7.57e+02  [1;97m4_1[0m 2.38e+03   [1;97mquality[0m 75.3%   [1;97mtime[0m 429.9s 
230   [1;97mloss[0m 3.82e+03   [1;97mcontent[0m [1;97m4_2[0m 7.42e+02   [1;97mstyle[0m [1;97m3_1[0m 7.36e+02  [1;97m4_1[0m 2.34e+03   [1;97mquality[0m 77.2%   [1;97mtime[0m 352.9s 
240   [1;97mloss[0m 3.81e+03   [1;97mcontent[0m [1;97m4_2[0m 7.42e+02   [1;97mstyle[0m [1;97m3_1[0m 7.32e+02  [1;97m4_1[0m 2.33e+03   [1;97mquality[0m 78.0%   [1;97mtime[0m 328.0s 

[1;94mPhase #3: resolution 512x512  scale 1.0[0;94m
  - Style layer 3_1: (13755, 260, 3, 3) patches in 32,186kb.
  - Style layer 4_1: (3264, 516, 3, 3) patches in 15,158kb.
  - Content layer conv4_2: 512 features in 2,097kb.
[0m
250   [1;97mloss[0m 3.95e+03   [1;97mcontent[0m [1;97m4_2[0m 6.41e+02   [1;97mstyle[0m [1;97m3_1[0m 7.46e+02  [1;97m4_1[0m 2.56e+03   [1;97mquality[0m 22.3%   [1;97mtime[0m 759.0s 
260   [1;97mloss[0m 3.11e+03   [1;97mcontent[0m [1;97m4_2[0m 5.97e+02   [1;97mstyle[0m [1;97m3_1[0m 5.90e+02  [1;97m4_1[0m 1.92e+03   [1;97mquality[0m 52.1%   [1;97mtime[0m 1433.5s 
270   [1;97mloss[0m 2.87e+03   [1;97mcontent[0m [1;97m4_2[0m 5.88e+02   [1;97mstyle[0m [1;97m3_1[0m 5.38e+02  [1;97m4_1[0m 1.75e+03   [1;97mquality[0m 68.6%   [1;97mtime[0m 1185.4s 
280   [1;97mloss[0m 2.73e+03   [1;97mcontent[0m [1;97m4_2[0m 5.83e+02   [1;97mstyle[0m [1;97m3_1[0m 5.02e+02  [1;97m4_1[0m 1.65e+03   [1;97mquality[0m 77.3%   [1;97mtime[0m 1059.7s 
290   [1;97mloss[0m 2.64e+03   [1;97mcontent[0m [1;97m4_2[0m 5.80e+02   [1;97mstyle[0m [1;97m3_1[0m 4.72e+02  [1;97m4_1[0m 1.58e+03   [1;97mquality[0m 81.0%   [1;97mtime[0m 1001.5s 
300   [1;97mloss[0m 2.56e+03   [1;97mcontent[0m [1;97m4_2[0m 5.76e+02   [1;97mstyle[0m [1;97m3_1[0m 4.50e+02  [1;97m4_1[0m 1.53e+03   [1;97mquality[0m 84.5%   [1;97mtime[0m 924.6s 
310   [1;97mloss[0m 2.50e+03   [1;97mcontent[0m [1;97m4_2[0m 5.72e+02   [1;97mstyle[0m [1;97m3_1[0m 4.33e+02  [1;97m4_1[0m 1.50e+03   [1;97mquality[0m 84.8%   [1;97mtime[0m 941.1s 
320   [1;97mloss[0m 2.45e+03   [1;97mcontent[0m [1;97m4_2[0m 5.69e+02   [1;97mstyle[0m [1;97m3_1[0m 4.18e+02  [1;97m4_1[0m 1.46e+03   [1;97mquality[0m 87.1%   [1;97mtime[0m 940.4s 

[0;36mOptimization finished in 13118.5s, average pixel error 4.0![0m

